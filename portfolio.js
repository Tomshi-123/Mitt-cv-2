// Definierar en funktion f√∂r att h√§mta GitHub-repos
async function fetchGitHubRepos() {
    try {
        // Skickar en HTTP-f√∂rfr√•gan till GitHubs API f√∂r att h√§mta alla publika repos f√∂r anv√§ndaren "Tomshi-123"
        const response = await fetch("https://api.github.com/users/Tomshi-123/repos");

        // Konverterar svaret fr√•n JSON-format till en JavaScript-array av objekt
        const repos = await response.json();

        // H√§mtar HTML-elementet med id "repo-container" d√§r repos ska visas
        const container = document.getElementById("repo-container");

        // Rensar befintligt inneh√•ll i containern innan nya repos l√§ggs till
        container.innerHTML = "";

        // Loopar igenom varje repository i den h√§mtade listan
        repos.forEach(async (repo) => {
            // Skapar ett nytt div-element f√∂r att representera ett repository
            const repoCard = document.createElement("div");

            // L√§gger till CSS-klassen "repo-card" f√∂r styling
            repoCard.classList.add("repo-card");


            // Skapar HTML-strukturen f√∂r kortet och fyller det med repo-information
            repoCard.innerHTML = `
                <h3>${repo.name}</h3> <!-- Repo-namn som l√§nk -->
                <p>‚≠ê ${repo.stargazers_count} | üç¥ ${repo.forks_count}</p> <!-- Visar antal stj√§rnor och forks -->
            `;

            // L√§gger till en klick-h√§ndelse p√• kortet, som h√§mtar README-filen och √∂ppnar panelen
            repoCard.addEventListener("click", () => {
                fetchReadme(repo.name);
            });

            // L√§gger till kortet i "repo-container" s√• det syns p√• sidan
            container.appendChild(repoCard);
        });

    } catch (error) {
        // Om n√•got g√•r fel vid h√§mtning av repos, logga felet i konsolen
        console.error("Kunde inte h√§mta repositories:", error);

        // Visa ett felmeddelande p√• sidan
        document.getElementById("repo-container").innerHTML = "<p>Fel vid h√§mtning av projekt.</p>";
    }
}

// Funktion f√∂r att h√§mta och visa README-filen f√∂r ett specifikt repository
async function fetchReadme(repoName) {
    try {
        // Skickar en f√∂rfr√•gan till GitHub API f√∂r att h√§mta README-filen f√∂r det valda repot
        const response = await fetch(`https://api.github.com/repos/Tomshi-123/${repoName}/readme`, {
            headers: { Accept: "application/vnd.github.v3.raw" } 
        });

        // Om responsen inte √§r OK (t.ex. README finns inte), kasta ett fel
        if (!response.ok) {
            throw new Error("README kunde inte h√§mtas");
        }

        // L√§s in README-inneh√•llet som text
        const readmeText = await response.text();

        // Uppdaterar inneh√•llet i sidopanelen med repo-namn och README-text
        document.getElementById("project-info-content").innerHTML = `
            <h2>${repoName}</h2>
            <div>${readmeText}</div> <!-- <pre> bevarar formatering av texten -->
            <button onclick="closePanel()" class="btn">St√§ng</button> <!-- Knapp f√∂r att st√§nga panelen -->
        `;

        // L√§gger till klassen "open" p√• sidopanelen s√• den visas
        document.getElementById("project-info-panel").classList.add("open");
    } catch (error) {
        // Om n√•got g√•r fel vid h√§mtning av README, logga felet i konsolen
        console.error("Kunde inte h√§mta README:", error);

        // Visa ett felmeddelande i sidopanelen
        document.getElementById("project-info-content").innerHTML = "<p>README kunde inte h√§mtas.</p>";
    }
}

// Funktion f√∂r att st√§nga sidopanelen
function closePanel() {
    // Tar bort klassen "open" fr√•n sidopanelen s√• den g√∂ms
    document.getElementById("project-info-panel").classList.remove("open");
}

// Anropar funktionen f√∂r att h√§mta och visa GitHub-repos direkt n√§r sidan laddas
fetchGitHubRepos();


//K√§llorna i denna kod √§r Chatgpt och StackOverflow mfl..